syntax = "proto3";
option java_package = "message";
import "monon.proto";

/*加密流程
客户端:
1，选择私钥 a (随机数，1 < a < p-1)
2，发送,g,A给服务端，(其中计算公钥 A = g^a mod p)

服务端:
1,选择私钥 b (随机数，1 < b < p-1)
2,计算公钥 B,并发送B给客户端,(其中计算公钥 B = g^b mod p)

校验K:
共享密钥计算:
客户端: K = B^a mod p = (g^b)^a mod p = g^(ab) mod p
服务端: K = A^b mod p = (g^a)^b mod p = g^(ab) mod p

HMAC 校验（更安全）
密钥验证：
对特定的消息进行加密/解密
从共享密钥生成 AES 密钥:
将 BigInteger 类型的共享密钥转换为字节数组
使用 SHA-256 哈希算法对密钥字节进行哈希处理
基于哈希结果创建 SecretKeySpec 对象作为 AES 密钥

加密：
创建 Cipher 实例，使用指定的转换方案
生成随机的 16 字节初始化向量(IV)
使用密钥和 IV 初始化 Cipher 为加密模式
加密消息内容
将 IV 和加密后的数据合并为一个字节数组(IV在前，加密数据在后)

解密:
从加密消息中提取前 16 字节作为 IV
剩余部分作为实际的加密数据
使用相同的密钥和提取的 IV 初始化 Cipher 为解密模式
执行解密操作
将解密结果转换为字符串返回

检查 H1 == H2，如果一致则密钥校验通过。
*/

//公钥交换请求
message KeyExchangeReq {
    bytes g = 1;   // 生成元
    bytes p = 2;   // 素数
    bytes public_key = 3; // 公钥
    int IV=4;//字节长度
}

//公钥交换响应
message KeyExchangeResp {
    bytes public_key = 1;   //公钥
}

// 用共享密钥加密测试验证请求
message KeyVerificationReq {
    bytes test_message = 1;  // 用共享密钥加密的测试消息
}
// 用共享密钥加密测试验证响应
message KeyVerificationResp {
    bool success = 1;                  // 验证是否成功
    bytes encrypted_echo = 2;          // 服务端返回的加密回显(可选)
    string error_message = 3;          // 失败时的错误信息
}

//示例
message LoginResponse
{
    fixed32 aaa = 1;
    fixed32 bbb = 2;
}

//示例
message TempRequest
{
    monon.messs ss=1;
    fixed32 aaa = 2;
    fixed32 bbb = 3;
}